// In this tutorial, we store the access token in a file so that we can reuse it
// every time we terminate and restart the bot.

// If the access token is lost, you will need to remove and reinstall the bot in order
// to obtain a new access token.

// In a real production implementation, the acess token should be saved in a more secure
// place and persistent so that it can be reliably re-used if the bot is restarted.
app.post('/oauth', async function (req, res) {
    console.log("Private bot being installed");
    if (req.body.access_token) {
      res.status(200).send('')
      // Bot access token is almost permanent. Thus, there is no need for a refresh token!
      // For calling RC Team Messaging API to post messages using the RingCentral JS SDK, we need
      // to create a token object and set it to the SDK's platform instance.
  
      // First, we get an empty token object from the platform instance, then we assign the
      // access token, the token type and other fake values to satify the SDK's tokens syntax.
      var tokenObj = platform.auth().data();
      tokenObj.access_token = req.body.access_token;
      tokenObj.token_type = "bearer"
      tokenObj.expires_in = 100000000000;
      tokenObj.refresh_token = 'xxx';
      tokenObj.refresh_token_expires_in = 10000000000;
  
      // Finally, we set the token object back to the platform instance and also save it to a file
      // for reuse.
      await platform.auth().setData(tokenObj);
      console.log( "Save tokens to a local file for reuse" )
      fs.writeFileSync( TOKEN_TEMP_FILE, JSON.stringify( tokenObj ) )
  
      console.log("Bot installation done")
      // The bot must subscribe for Team Messaging events notification so that it can receive messages
      // and other important events notification from bot users and from RingCentral server.
      subscribeToEvents()
    }else{
      res.status(401).end()
    }
  });
  
  // Callback method received after subscribing to webhook. This method handles webhook
  // notifications and will be invoked when a user sends a message to your bot, and when
  // the bot is added to/removed from a group or a team etc.
  app.post('/webhook-callback', async function (req, res) {
    var validationToken = req.get('Validation-Token');
  });


async function subscribeToEvents() {
    const subscriptionData = {
        eventFilters: [
            "/restapi/v1.0/glip/groups", // Team Messaging (a.k.a Glip) events.
            "/restapi/v1.0/account/~/extension/~", // Subscribe for this event to detect when a bot is uninstalled
            "/restapi/v1.0/subscription/~?threshold=60&interval=15" // For subscription renewal
        ],
        deliveryMode: {
            transportType: 'WebHook',
            address: process.env.WEBHOOKS_DELIVERY_ADDRESS // Your webhook URL
        },
        expiresIn: 604799
    };

    try {
        var resp = await platform.post('/restapi/v1.0/subscription', requestData)
        var jsonObj = await resp.json()
        console.log('Team Messaging events notifications subscribed successfully.');
        // Save the subscription id to a file so that we can check its status every time the
        // bot is restarted.
        fs.writeFileSync( SUBSCRIPTION_ID_TEMP_FILE, jsonObj.id )
        console.log('Your bot is ready for conversations ...');
        }
        
    catch (e) {
        console.error('Team Messaging events notifications subscription failed. ', e);
        throw e;
        }
async function renewSubscription(id) {
    console.log("Auto subscription renewal");
    try {
        // Make a POST request to renew the subscription using the provided ID
        var resp = await platform.post(`/restapi/v1.0/subscription/${id}/renew`);
                
        // Check if the response status is OK (200)
        if (resp.status === 200) {
            // Parse the JSON response
            var jsonObj = await resp.json();
            console.log("Subscription renewed successfully:", jsonObj);
            return jsonObj; // Return the renewed subscription details
         } else {
            // Handle non-200 responses
            console.error(`Failed to renew subscription. Status: ${resp.status}`);
            var errorResponse = await resp.json();
            console.error("Error details:", errorResponse);
            throw new Error(`Error renewing subscription: ${errorResponse.message}`);
        }
    } catch (error) {
        // Handle any errors that occurred during the request
        console.error("An error occurred while renewing the subscription:", error);
        throw error; // Rethrow the error for further handling if needed
        }
    }
}